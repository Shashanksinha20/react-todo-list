{"version":3,"sources":["TodoList.js","App.js","serviceWorker.js","index.js"],"names":["TodoList","props","makeTasks","bind","item","onClick","delete","key","text","this","taskItems","tasks","map","className","React","Component","App","state","items","addItemHandler","deleteItemHandler","e","_inputElement","value","newItem","Date","now","setState","prevState","concat","console","log","preventDefault","filteredItems","filter","onSubmit","ref","a","type","placeholder","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"2SAmCeA,G,kBA/Bf,WAAYC,GAAO,IAAD,8BACd,4CAAMA,KAELC,UAAY,EAAKA,UAAUC,KAAf,gBAHC,E,uEAORC,GAAM,IAAD,OACf,OAAO,wBAAIC,QAAW,kBAAM,EAAKC,OAAOF,EAAKG,MAC7CA,IAAOH,EAAKG,KADL,IACYH,EAAKI,KADjB,O,6BAIAD,GACHE,KAAKR,MAAMK,OAAOC,K,+BAKtB,IACIG,EADWD,KAAKR,MAAMU,MACDC,IAAIH,KAAKP,WAE9B,OAEQ,wBAAIW,UAAY,WACZ,gCAASH,Q,GAzBFI,IAAMC,YCqEdC,G,kBAnEf,WAAYf,GAAO,IAAD,8BAChB,4CAAMA,KAGHgB,MAAQ,CACbC,MAAS,IAET,EAAKC,eAAkB,EAAKA,eAAehB,KAApB,gBACvB,EAAKiB,kBAAoB,EAAKA,kBAAkBjB,KAAvB,gBARP,E,4EAYHkB,GAEf,GAAgC,KAA7BZ,KAAKa,cAAcC,MAAc,CAElC,IAAIC,EAAU,CACZhB,KAAOC,KAAKa,cAAcC,MAC1BhB,IAAKkB,KAAKC,OAEdjB,KAAKkB,UAAS,SAACC,GACf,MAAO,CACLV,MAAQU,EAAUV,MAAMW,OAAOL,OAKjCf,KAAKa,cAAcC,MAAQ,GAC3BO,QAAQC,IAAItB,KAAKQ,MAAMC,OAEvBG,EAAEW,mB,wCAGgBzB,GAEhB,IAAI0B,EAAgBxB,KAAKQ,MAAMC,MAAMgB,QAAO,SAAS9B,GACnD,OAAQA,EAAKG,MAAOA,KAGtBE,KAAKkB,SAAS,CACZT,MAAOe,M,+BAKF,IAAD,OACN,OACE,yBAAKpB,UAAU,OAEf,yBAAKA,UAAY,gBACjB,yBAAKA,UAAY,UACjB,0BAAMsB,SAAY1B,KAAKU,gBAEvB,2BAAOiB,IAAQ,SAACC,GAAD,OAAO,EAAKf,cAAgBe,GAC3CC,KAAO,OAAOC,YAAc,eAC5B,4BAAQ1B,UAAY,SAASyB,KAAO,UAAS,2CAI7C,kBAAC,EAAD,CAAU3B,MAASF,KAAKQ,MAAMC,MAC5BZ,OAAUG,KAAKW,yB,GA7DHN,IAAMC,YCQJyB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL1B,QAAQ0B,MAAMA,EAAMC,c","file":"static/js/main.387f2d37.chunk.js","sourcesContent":["import React  from 'react';\nimport \"./TodoList.css\";\n\nclass TodoList extends React.Component{\nconstructor(props){\n    super(props);\n\nthis.makeTasks = this.makeTasks.bind(this);\n\n}\n\nmakeTasks(item){\nreturn <li onClick = {() => this.delete(item.key)}\nkey = {item.key}> {item.text} </li>\n}\n\ndelete(key){\n    this.props.delete(key);\n\n}\n\nrender(){\nvar todoTask = this.props.tasks;\nvar taskItems = todoTask.map(this.makeTasks);\n\n    return(\n    \n            <ul className = \"theList\">\n                <strong>{taskItems}</strong>\n            </ul>\n    );\n\n }\n}\n\nexport default TodoList;","import React from 'react';\nimport TodoList from \"./TodoList\";\nimport './App.css';\n\nclass App extends React.Component{\nconstructor(props){\n  super(props);\n\n\nthis.state = {\nitems  : []\n};\nthis.addItemHandler  = this.addItemHandler.bind(this);\nthis.deleteItemHandler = this.deleteItemHandler.bind(this);\n\n}\n\naddItemHandler(e){\n\nif(this._inputElement.value !== \"\") {\n\n  var newItem = {\n    text : this._inputElement.value,\n    key: Date.now()\n  }\nthis.setState((prevState) => {\nreturn {\n  items : prevState.items.concat(newItem)\n};\n});\n}\n\nthis._inputElement.value = \"\";\nconsole.log(this.state.items);\n\ne.preventDefault();\n\n}\ndeleteItemHandler(key){\n\n  var filteredItems = this.state.items.filter(function(item){\n    return (item.key !==key)\n  });\n\n  this.setState({\n    items: filteredItems\n  });\n}\n\n\nrender(){\n  return (\n    <div className=\"App\">\n\n    <div className = \"todoListMain\">\n    <div className = \"header\">\n    <form onSubmit = {this.addItemHandler}>\n    \n    <input ref =  {(a) => this._inputElement = a} \n    type = \"text\" placeholder = \"Enter TASK\"></input>\n    <button className = \"button\" type = \"Submit\"><strong>ADD</strong></button>\n    </form>\n    </div>\n    </div>\n    <TodoList tasks = {this.state.items}\n      delete = {this.deleteItemHandler}\n    />\n    </div>\n  );\n}\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}